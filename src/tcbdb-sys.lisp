;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.
 
(defpackage #:tcbdb-sys
  (:use #:cl #:cffi))
(in-package :tcbdb-sys)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cffi:defcstruct TCBDB
	(mmtx :pointer)
	(cmtx :pointer)
	(hdb :pointer)
	(opaque :string)
	(open :pointer)
	(wmode :pointer)
	(lmemb :pointer)
	(nmemb :pointer)
	(opts :pointer)
	(root :pointer)
	(first :pointer)
	(last :pointer)
	(lnum :pointer)
	(nnum :pointer)
	(rnum :pointer)
	(leafc :pointer)
	(nodec :pointer)
	(cmp :pointer)
	(cmpop :pointer)
	(lcnum :pointer)
	(ncnum :pointer)
	(lsmax :pointer)
	(lschk :pointer)
	(capnum :pointer)
	(hist :pointer)
	(hnum :int)
	(hleaf :pointer)
	(lleaf :pointer)
	(tran :pointer)
	(rbopaque :string)
	(clock :pointer)
	(cnt_saveleaf :pointer)
	(cnt_loadleaf :pointer)
	(cnt_killleaf :pointer)
	(cnt_adjleafc :pointer)
	(cnt_savenode :pointer)
	(cnt_loadnode :pointer)
	(cnt_adjnodec :pointer))

(defanonenum 
	(BDBFOPEN #.HDBFOPEN)
	(BDBFFATAL #.HDBFFATA))

(defanonenum 
	(BDBTLARGE #.(cl:ash 1 0))
	(BDBTDEFLATE #.(cl:ash 1 1))
	(BDBTBZIP #.(cl:ash 1 2))
	(BDBTTCBS #.(cl:ash 1 3))
	(BDBTEXCODEC #.(cl:ash 1 4)))

(defanonenum 
	(BDBOREADER #.(cl:ash 1 0))
	(BDBOWRITER #.(cl:ash 1 1))
	(BDBOCREAT #.(cl:ash 1 2))
	(BDBOTRUNC #.(cl:ash 1 3))
	(BDBONOLCK #.(cl:ash 1 4))
	(BDBOLCKNB #.(cl:ash 1 5))
	(BDBOTSYNC #.(cl:ash 1 6)))

(cffi:defcstruct BDBCUR
	(bdb :pointer)
	(clock :pointer)
	(id :pointer)
	(kidx :pointer)
	(vidx :pointer))

(defanonenum 
	BDBCPCURRENT
	BDBCPBEFORE
	BDBCPAFTER)

(cffi:defcfun ("tcbdberrmsg" tcbdberrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcbdbnew" tcbdbnew) :pointer)

(cffi:defcfun ("tcbdbdel" tcbdbdel) :void
  (bdb :pointer))

(cffi:defcfun ("tcbdbecode" tcbdbecode) :int
  (bdb :pointer))

(cffi:defcfun ("tcbdbsetmutex" tcbdbsetmutex) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbsetcmpfunc" tcbdbsetcmpfunc) :pointer
  (bdb :pointer)
  (cmp :pointer)
  (cmpop :pointer))

(cffi:defcfun ("tcbdbtune" tcbdbtune) :pointer
  (bdb :pointer)
  (lmemb :pointer)
  (nmemb :pointer)
  (bnum :pointer)
  (apow :pointer)
  (fpow :pointer)
  (opts :pointer))

(cffi:defcfun ("tcbdbsetcache" tcbdbsetcache) :pointer
  (bdb :pointer)
  (lcnum :pointer)
  (ncnum :pointer))

(cffi:defcfun ("tcbdbsetxmsiz" tcbdbsetxmsiz) :pointer
  (bdb :pointer)
  (xmsiz :pointer))

(cffi:defcfun ("tcbdbsetdfunit" tcbdbsetdfunit) :pointer
  (bdb :pointer)
  (dfunit :pointer))

(cffi:defcfun ("tcbdbopen" tcbdbopen) :pointer
  (bdb :pointer)
  (path :string)
  (omode :int))

(cffi:defcfun ("tcbdbclose" tcbdbclose) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbput" tcbdbput) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcbdbput2" tcbdbput2) :pointer
  (bdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcbdbputkeep" tcbdbputkeep) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcbdbputkeep2" tcbdbputkeep2) :pointer
  (bdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcbdbputcat" tcbdbputcat) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcbdbputcat2" tcbdbputcat2) :pointer
  (bdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcbdbputdup" tcbdbputdup) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcbdbputdup2" tcbdbputdup2) :pointer
  (bdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcbdbputdup3" tcbdbputdup3) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vals :pointer))

(cffi:defcfun ("tcbdbout" tcbdbout) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbout2" tcbdbout2) :pointer
  (bdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcbdbout3" tcbdbout3) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbget" tcbdbget) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcbdbget2" tcbdbget2) :string
  (bdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcbdbget3" tcbdbget3) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcbdbget4" tcbdbget4) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbvnum" tcbdbvnum) :int
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbvnum2" tcbdbvnum2) :int
  (bdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcbdbvsiz" tcbdbvsiz) :int
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbvsiz2" tcbdbvsiz2) :int
  (bdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcbdbrange" tcbdbrange) :pointer
  (bdb :pointer)
  (bkbuf :pointer)
  (bksiz :int)
  (binc :pointer)
  (ekbuf :pointer)
  (eksiz :int)
  (einc :pointer)
  (max :int))

(cffi:defcfun ("tcbdbrange2" tcbdbrange2) :pointer
  (bdb :pointer)
  (bkstr :string)
  (binc :pointer)
  (ekstr :string)
  (einc :pointer)
  (max :int))

(cffi:defcfun ("tcbdbfwmkeys" tcbdbfwmkeys) :pointer
  (bdb :pointer)
  (pbuf :pointer)
  (psiz :int)
  (max :int))

(cffi:defcfun ("tcbdbfwmkeys2" tcbdbfwmkeys2) :pointer
  (bdb :pointer)
  (pstr :string)
  (max :int))

(cffi:defcfun ("tcbdbaddint" tcbdbaddint) :int
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tcbdbadddouble" tcbdbadddouble) :double
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tcbdbsync" tcbdbsync) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdboptimize" tcbdboptimize) :pointer
  (bdb :pointer)
  (lmemb :pointer)
  (nmemb :pointer)
  (bnum :pointer)
  (apow :pointer)
  (fpow :pointer)
  (opts :pointer))

(cffi:defcfun ("tcbdbvanish" tcbdbvanish) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbcopy" tcbdbcopy) :pointer
  (bdb :pointer)
  (path :string))

(cffi:defcfun ("tcbdbtranbegin" tcbdbtranbegin) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbtrancommit" tcbdbtrancommit) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbtranabort" tcbdbtranabort) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbpath" tcbdbpath) :string
  (bdb :pointer))

(cffi:defcfun ("tcbdbrnum" tcbdbrnum) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbfsiz" tcbdbfsiz) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbcurnew" tcbdbcurnew) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbcurdel" tcbdbcurdel) :void
  (cur :pointer))

(cffi:defcfun ("tcbdbcurfirst" tcbdbcurfirst) :pointer
  (cur :pointer))

(cffi:defcfun ("tcbdbcurlast" tcbdbcurlast) :pointer
  (cur :pointer))

(cffi:defcfun ("tcbdbcurjump" tcbdbcurjump) :pointer
  (cur :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbcurjump2" tcbdbcurjump2) :pointer
  (cur :pointer)
  (kstr :string))

(cffi:defcfun ("tcbdbcurprev" tcbdbcurprev) :pointer
  (cur :pointer))

(cffi:defcfun ("tcbdbcurnext" tcbdbcurnext) :pointer
  (cur :pointer))

(cffi:defcfun ("tcbdbcurput" tcbdbcurput) :pointer
  (cur :pointer)
  (vbuf :pointer)
  (vsiz :int)
  (cpmode :int))

(cffi:defcfun ("tcbdbcurput2" tcbdbcurput2) :pointer
  (cur :pointer)
  (vstr :string)
  (cpmode :int))

(cffi:defcfun ("tcbdbcurout" tcbdbcurout) :pointer
  (cur :pointer))

(cffi:defcfun ("tcbdbcurkey" tcbdbcurkey) :pointer
  (cur :pointer)
  (sp :pointer))

(cffi:defcfun ("tcbdbcurkey2" tcbdbcurkey2) :string
  (cur :pointer))

(cffi:defcfun ("tcbdbcurkey3" tcbdbcurkey3) :pointer
  (cur :pointer)
  (sp :pointer))

(cffi:defcfun ("tcbdbcurval" tcbdbcurval) :pointer
  (cur :pointer)
  (sp :pointer))

(cffi:defcfun ("tcbdbcurval2" tcbdbcurval2) :string
  (cur :pointer))

(cffi:defcfun ("tcbdbcurval3" tcbdbcurval3) :pointer
  (cur :pointer)
  (sp :pointer))

(cffi:defcfun ("tcbdbcurrec" tcbdbcurrec) :pointer
  (cur :pointer)
  (kxstr :pointer)
  (vxstr :pointer))

(cffi:defcfun ("tcbdbsetecode" tcbdbsetecode) :void
  (bdb :pointer)
  (ecode :int)
  (filename :string)
  (line :int)
  (func :string))

(cffi:defcfun ("tcbdbsetdbgfd" tcbdbsetdbgfd) :void
  (bdb :pointer)
  (fd :int))

(cffi:defcfun ("tcbdbdbgfd" tcbdbdbgfd) :int
  (bdb :pointer))

(cffi:defcfun ("tcbdbhasmutex" tcbdbhasmutex) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbmemsync" tcbdbmemsync) :pointer
  (bdb :pointer)
  (phys :pointer))

(cffi:defcfun ("tcbdbcacheclear" tcbdbcacheclear) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbcmpfunc" tcbdbcmpfunc) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbcmpop" tcbdbcmpop) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdblmemb" tcbdblmemb) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbnmemb" tcbdbnmemb) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdblnum" tcbdblnum) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbnnum" tcbdbnnum) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbbnum" tcbdbbnum) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbalign" tcbdbalign) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbfbpmax" tcbdbfbpmax) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbinode" tcbdbinode) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbmtime" tcbdbmtime) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbflags" tcbdbflags) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbopts" tcbdbopts) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbopaque" tcbdbopaque) :string
  (bdb :pointer))

(cffi:defcfun ("tcbdbbnumused" tcbdbbnumused) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbsetlsmax" tcbdbsetlsmax) :pointer
  (bdb :pointer)
  (lsmax :pointer))

(cffi:defcfun ("tcbdbsetcapnum" tcbdbsetcapnum) :pointer
  (bdb :pointer)
  (capnum :pointer))

(cffi:defcfun ("tcbdbsetcodecfunc" tcbdbsetcodecfunc) :pointer
  (bdb :pointer)
  (enc :pointer)
  (encop :pointer)
  (dec :pointer)
  (decop :pointer))

(cffi:defcfun ("tcbdbdfunit" tcbdbdfunit) :pointer
  (bdb :pointer))

(cffi:defcfun ("tcbdbdefrag" tcbdbdefrag) :pointer
  (bdb :pointer)
  (step :pointer))

(cffi:defcfun ("tcbdbputdupback" tcbdbputdupback) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcbdbputdupback2" tcbdbputdupback2) :pointer
  (bdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcbdbputproc" tcbdbputproc) :pointer
  (bdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (proc :pointer)
  (op :pointer))

(cffi:defcfun ("tcbdbcurjumpback" tcbdbcurjumpback) :pointer
  (cur :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcbdbcurjumpback2" tcbdbcurjumpback2) :pointer
  (cur :pointer)
  (kstr :string))

(cffi:defcfun ("tcbdbforeach" tcbdbforeach) :pointer
  (bdb :pointer)
  (iter :pointer)
  (op :pointer))


