;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 1.3.40
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.
  
(defpackage #:tcutil-sys
 (:use #:cl #:cffi))
(in-package :tcutil-sys)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant true 1)

(cl:defconstant false 0)

(cl:defconstant __bool_true_false_are_defined 1)

(cffi:defcvar ("tcversion" tcversion)
 :string)

(cffi:defcvar ("tcfatalfunc" tcfatalfunc)
 :pointer)

(cffi:defcfun ("tcmalloc" tcmalloc) :pointer
  (size :pointer))

(cffi:defcfun ("tccalloc" tccalloc) :pointer
  (nmemb :pointer)
  (size :pointer))

(cffi:defcfun ("tcrealloc" tcrealloc) :pointer
  (ptr :pointer)
  (size :pointer))

(cffi:defcfun ("tcmemdup" tcmemdup) :pointer
  (ptr :pointer)
  (size :pointer))

(cffi:defcfun ("tcstrdup" tcstrdup) :string
  (str :pointer))

(cffi:defcfun ("tcfree" tcfree) :void
  (ptr :pointer))

(cffi:defctype TCCMP :pointer)

(cffi:defctype TCCODEC :pointer)

(cffi:defctype TCPDPROC :pointer)

(cffi:defctype TCITER :pointer)

(cffi:defcstruct TCXSTR
	(ptr :string)
	(size :int)
	(asize :int))

(cffi:defcfun ("tcxstrnew" tcxstrnew) :pointer)

(cffi:defcfun ("tcxstrnew2" tcxstrnew2) :pointer
  (str :string))

(cffi:defcfun ("tcxstrnew3" tcxstrnew3) :pointer
  (asiz :int))

(cffi:defcfun ("tcxstrdup" tcxstrdup) :pointer
  (xstr :pointer))

(cffi:defcfun ("tcxstrdel" tcxstrdel) :void
  (xstr :pointer))

(cffi:defcfun ("tcxstrcat" tcxstrcat) :void
  (xstr :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tcxstrcat2" tcxstrcat2) :void
  (xstr :pointer)
  (str :string))

(cffi:defcfun ("tcxstrptr" tcxstrptr) :pointer
  (xstr :pointer))

(cffi:defcfun ("tcxstrsize" tcxstrsize) :int
  (xstr :pointer))

(cffi:defcfun ("tcxstrclear" tcxstrclear) :void
  (xstr :pointer))

(cffi:defcfun ("tcxstrprintf" tcxstrprintf) :void
  (xstr :pointer)
  (format :string)
  &rest)

(cffi:defcfun ("tcsprintf" tcsprintf) :string
  (format :string)
  &rest)

(cffi:defcfun ("tcxstrtomalloc" tcxstrtomalloc) :pointer
  (xstr :pointer))

(cffi:defcfun ("tcxstrfrommalloc" tcxstrfrommalloc) :pointer
  (ptr :pointer)
  (size :int))

(cffi:defcstruct TCLISTDATUM
	(ptr :string)
	(size :int))

(cffi:defcstruct TCLIST
	(array :pointer)
	(anum :int)
	(start :int)
	(num :int))

(cffi:defcfun ("tclistnew" tclistnew) :pointer)

(cffi:defcfun ("tclistnew2" tclistnew2) :pointer
  (anum :int))

(cffi:defcfun ("tclistnew3" tclistnew3) :pointer
  (str :string)
  &rest)

(cffi:defcfun ("tclistdup" tclistdup) :pointer
  (list :pointer))

(cffi:defcfun ("tclistdel" tclistdel) :void
  (list :pointer))

(cffi:defcfun ("tclistnum" tclistnum) :int
  (list :pointer))

(cffi:defcfun ("tclistval" tclistval) :pointer
  (list :pointer)
  (index :int)
  (sp :pointer))

(cffi:defcfun ("tclistval2" tclistval2) :string
  (list :pointer)
  (index :int))

(cffi:defcfun ("tclistpush" tclistpush) :void
  (list :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistpush2" tclistpush2) :void
  (list :pointer)
  (str :string))

(cffi:defcfun ("tclistpop" tclistpop) :pointer
  (list :pointer)
  (sp :pointer))

(cffi:defcfun ("tclistpop2" tclistpop2) :string
  (list :pointer))

(cffi:defcfun ("tclistunshift" tclistunshift) :void
  (list :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistunshift2" tclistunshift2) :void
  (list :pointer)
  (str :string))

(cffi:defcfun ("tclistshift" tclistshift) :pointer
  (list :pointer)
  (sp :pointer))

(cffi:defcfun ("tclistshift2" tclistshift2) :string
  (list :pointer))

(cffi:defcfun ("tclistinsert" tclistinsert) :void
  (list :pointer)
  (index :int)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistinsert2" tclistinsert2) :void
  (list :pointer)
  (index :int)
  (str :string))

(cffi:defcfun ("tclistremove" tclistremove) :pointer
  (list :pointer)
  (index :int)
  (sp :pointer))

(cffi:defcfun ("tclistremove2" tclistremove2) :string
  (list :pointer)
  (index :int))

(cffi:defcfun ("tclistover" tclistover) :void
  (list :pointer)
  (index :int)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistover2" tclistover2) :void
  (list :pointer)
  (index :int)
  (str :string))

(cffi:defcfun ("tclistsort" tclistsort) :void
  (list :pointer))

(cffi:defcfun ("tclistlsearch" tclistlsearch) :int
  (list :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistbsearch" tclistbsearch) :int
  (list :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistclear" tclistclear) :void
  (list :pointer))

(cffi:defcfun ("tclistdump" tclistdump) :pointer
  (list :pointer)
  (sp :pointer))

(cffi:defcfun ("tclistload" tclistload) :pointer
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistpushmalloc" tclistpushmalloc) :void
  (list :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tclistsortci" tclistsortci) :void
  (list :pointer))

(cffi:defcfun ("tclistsortex" tclistsortex) :void
  (list :pointer)
  (cmp :pointer))

(cffi:defcfun ("tclistinvert" tclistinvert) :void
  (list :pointer))

(cffi:defcfun ("tclistprintf" tclistprintf) :void
  (list :pointer)
  (format :string)
  &rest)

(cffi:defcstruct TCMAPREC
	(ksiz :pointer)
	(vsiz :pointer)
	(left :pointer)
	(right :pointer)
	(prev :pointer)
	(next :pointer))

(cffi:defctype TCMAPREC :pointer)

(cffi:defcstruct TCMAP
	(buckets :pointer)
	(first :pointer)
	(last :pointer)
	(cur :pointer)
	(bnum :pointer)
	(rnum :pointer)
	(msiz :pointer))

(cffi:defcfun ("tcmapnew" tcmapnew) :pointer)

(cffi:defcfun ("tcmapnew2" tcmapnew2) :pointer
  (bnum :pointer))

(cffi:defcfun ("tcmapnew3" tcmapnew3) :pointer
  (str :string)
  &rest)

(cffi:defcfun ("tcmapdup" tcmapdup) :pointer
  (map :pointer))

(cffi:defcfun ("tcmapdel" tcmapdel) :void
  (map :pointer))

(cffi:defcfun ("tcmapput" tcmapput) :void
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmapput2" tcmapput2) :void
  (map :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcmapputkeep" tcmapputkeep) :boolean
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmapputkeep2" tcmapputkeep2) :boolean
  (map :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcmapputcat" tcmapputcat) :void
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmapputcat2" tcmapputcat2) :void
  (map :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcmapout" tcmapout) :boolean
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcmapout2" tcmapout2) :boolean
  (map :pointer)
  (kstr :string))

(cffi:defcfun ("tcmapget" tcmapget) :pointer
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcmapget2" tcmapget2) :string
  (map :pointer)
  (kstr :string))

(cffi:defcfun ("tcmapmove" tcmapmove) :boolean
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (head :pointer))

(cffi:defcfun ("tcmapmove2" tcmapmove2) :boolean
  (map :pointer)
  (kstr :string)
  (head :pointer))

(cffi:defcfun ("tcmapiterinit" tcmapiterinit) :void
  (map :pointer))

(cffi:defcfun ("tcmapiternext" tcmapiternext) :pointer
  (map :pointer)
  (sp :pointer))

(cffi:defcfun ("tcmapiternext2" tcmapiternext2) :string
  (map :pointer))

(cffi:defcfun ("tcmaprnum" tcmaprnum) :pointer
  (map :pointer))

(cffi:defcfun ("tcmapmsiz" tcmapmsiz) :pointer
  (map :pointer))

(cffi:defcfun ("tcmapkeys" tcmapkeys) :pointer
  (map :pointer))

(cffi:defcfun ("tcmapvals" tcmapvals) :pointer
  (map :pointer))

(cffi:defcfun ("tcmapaddint" tcmapaddint) :int
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tcmapadddouble" tcmapadddouble) :double
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tcmapclear" tcmapclear) :void
  (map :pointer))

(cffi:defcfun ("tcmapcutfront" tcmapcutfront) :void
  (map :pointer)
  (num :int))

(cffi:defcfun ("tcmapdump" tcmapdump) :pointer
  (map :pointer)
  (sp :pointer))

(cffi:defcfun ("tcmapload" tcmapload) :pointer
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tcmapput3" tcmapput3) :void
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :string)
  (vsiz :int))

(cffi:defcfun ("tcmapput4" tcmapput4) :void
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (fvbuf :pointer)
  (fvsiz :int)
  (lvbuf :pointer)
  (lvsiz :int))

(cffi:defcfun ("tcmapputcat3" tcmapputcat3) :void
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmapputproc" tcmapputproc) :boolean
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (proc :pointer)
  (op :pointer))

(cffi:defcfun ("tcmapget3" tcmapget3) :pointer
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcmapget4" tcmapget4) :string
  (map :pointer)
  (kstr :string)
  (dstr :string))

(cffi:defcfun ("tcmapiterinit2" tcmapiterinit2) :void
  (map :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcmapiterinit3" tcmapiterinit3) :void
  (map :pointer)
  (kstr :string))

(cffi:defcfun ("tcmapiterval" tcmapiterval) :pointer
  (kbuf :pointer)
  (sp :pointer))

(cffi:defcfun ("tcmapiterval2" tcmapiterval2) :string
  (kstr :string))

(cffi:defcfun ("tcmapkeys2" tcmapkeys2) :pointer
  (map :pointer)
  (np :pointer))

(cffi:defcfun ("tcmapvals2" tcmapvals2) :pointer
  (map :pointer)
  (np :pointer))

(cffi:defcfun ("tcmaploadone" tcmaploadone) :pointer
  (ptr :pointer)
  (size :int)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcmapprintf" tcmapprintf) :void
  (map :pointer)
  (kstr :string)
  (format :string)
  &rest)

(cffi:defcstruct TCTREEREC
	(ksiz :pointer)
	(vsiz :pointer)
	(left :pointer)
	(right :pointer))

(cffi:defctype TCTREEREC :pointer)

(cffi:defcstruct TCTREE
	(root :pointer)
	(cur :pointer)
	(rnum :pointer)
	(msiz :pointer)
	(cmp :pointer)
	(cmpop :pointer))

(cffi:defcfun ("tctreenew" tctreenew) :pointer)

(cffi:defcfun ("tctreenew2" tctreenew2) :pointer
  (cmp :pointer)
  (cmpop :pointer))

(cffi:defcfun ("tctreedup" tctreedup) :pointer
  (tree :pointer))

(cffi:defcfun ("tctreedel" tctreedel) :void
  (tree :pointer))

(cffi:defcfun ("tctreeput" tctreeput) :void
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tctreeput2" tctreeput2) :void
  (tree :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tctreeputkeep" tctreeputkeep) :boolean
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tctreeputkeep2" tctreeputkeep2) :boolean
  (tree :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tctreeputcat" tctreeputcat) :void
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tctreeputcat2" tctreeputcat2) :void
  (tree :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tctreeputproc" tctreeputproc) :boolean
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (proc :pointer)
  (op :pointer))

(cffi:defcfun ("tctreeout" tctreeout) :boolean
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tctreeout2" tctreeout2) :boolean
  (tree :pointer)
  (kstr :string))

(cffi:defcfun ("tctreeget" tctreeget) :pointer
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tctreeget2" tctreeget2) :string
  (tree :pointer)
  (kstr :string))

(cffi:defcfun ("tctreeiterinit" tctreeiterinit) :void
  (tree :pointer))

(cffi:defcfun ("tctreeiternext" tctreeiternext) :pointer
  (tree :pointer)
  (sp :pointer))

(cffi:defcfun ("tctreeiternext2" tctreeiternext2) :string
  (tree :pointer))

(cffi:defcfun ("tctreernum" tctreernum) :pointer
  (tree :pointer))

(cffi:defcfun ("tctreemsiz" tctreemsiz) :pointer
  (tree :pointer))

(cffi:defcfun ("tctreekeys" tctreekeys) :pointer
  (tree :pointer))

(cffi:defcfun ("tctreevals" tctreevals) :pointer
  (tree :pointer))

(cffi:defcfun ("tctreeaddint" tctreeaddint) :int
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tctreeadddouble" tctreeadddouble) :double
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tctreeclear" tctreeclear) :void
  (tree :pointer))

(cffi:defcfun ("tctreecutfringe" tctreecutfringe) :void
  (tree :pointer)
  (num :int))

(cffi:defcfun ("tctreedump" tctreedump) :pointer
  (tree :pointer)
  (sp :pointer))

(cffi:defcfun ("tctreeload" tctreeload) :pointer
  (ptr :pointer)
  (size :int)
  (cmp :pointer)
  (cmpop :pointer))

(cffi:defcfun ("tctreeput3" tctreeput3) :void
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tctreeputkeep3" tctreeputkeep3) :boolean
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tctreeputcat3" tctreeputcat3) :void
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tctreeget3" tctreeget3) :pointer
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tctreeget4" tctreeget4) :string
  (tree :pointer)
  (kstr :string)
  (dstr :string))

(cffi:defcfun ("tctreeiterinit2" tctreeiterinit2) :void
  (tree :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tctreeiterinit3" tctreeiterinit3) :void
  (tree :pointer)
  (kstr :string))

(cffi:defcfun ("tctreeiterval" tctreeiterval) :pointer
  (kbuf :pointer)
  (sp :pointer))

(cffi:defcfun ("tctreeiterval2" tctreeiterval2) :string
  (kstr :string))

(cffi:defcfun ("tctreekeys2" tctreekeys2) :pointer
  (tree :pointer)
  (np :pointer))

(cffi:defcfun ("tctreevals2" tctreevals2) :pointer
  (tree :pointer)
  (np :pointer))

(cffi:defcfun ("tctreeloadone" tctreeloadone) :pointer
  (ptr :pointer)
  (size :int)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tctreeprintf" tctreeprintf) :void
  (tree :pointer)
  (kstr :string)
  (format :string)
  &rest)

(cffi:defcstruct TCMDB
	(mmtxs :pointer)
	(imtx :pointer)
	(maps :pointer)
	(iter :int))

(cffi:defcfun ("tcmdbnew" tcmdbnew) :pointer)

(cffi:defcfun ("tcmdbnew2" tcmdbnew2) :pointer
  (bnum :pointer))

(cffi:defcfun ("tcmdbdel" tcmdbdel) :void
  (mdb :pointer))

(cffi:defcfun ("tcmdbput" tcmdbput) :void
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmdbput2" tcmdbput2) :void
  (mdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcmdbputkeep" tcmdbputkeep) :boolean
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmdbputkeep2" tcmdbputkeep2) :boolean
  (mdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcmdbputcat" tcmdbputcat) :void
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmdbputcat2" tcmdbputcat2) :void
  (mdb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcmdbout" tcmdbout) :boolean
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcmdbout2" tcmdbout2) :boolean
  (mdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcmdbget" tcmdbget) :pointer
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcmdbget2" tcmdbget2) :string
  (mdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcmdbvsiz" tcmdbvsiz) :int
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcmdbvsiz2" tcmdbvsiz2) :int
  (mdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcmdbiterinit" tcmdbiterinit) :void
  (mdb :pointer))

(cffi:defcfun ("tcmdbiternext" tcmdbiternext) :pointer
  (mdb :pointer)
  (sp :pointer))

(cffi:defcfun ("tcmdbiternext2" tcmdbiternext2) :string
  (mdb :pointer))

(cffi:defcfun ("tcmdbfwmkeys" tcmdbfwmkeys) :pointer
  (mdb :pointer)
  (pbuf :pointer)
  (psiz :int)
  (max :int))

(cffi:defcfun ("tcmdbfwmkeys2" tcmdbfwmkeys2) :pointer
  (mdb :pointer)
  (pstr :string)
  (max :int))

(cffi:defcfun ("tcmdbrnum" tcmdbrnum) :pointer
  (mdb :pointer))

(cffi:defcfun ("tcmdbmsiz" tcmdbmsiz) :pointer
  (mdb :pointer))

(cffi:defcfun ("tcmdbaddint" tcmdbaddint) :int
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tcmdbadddouble" tcmdbadddouble) :double
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tcmdbvanish" tcmdbvanish) :void
  (mdb :pointer))

(cffi:defcfun ("tcmdbcutfront" tcmdbcutfront) :void
  (mdb :pointer)
  (num :int))

(cffi:defcfun ("tcmdbput3" tcmdbput3) :void
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :string)
  (vsiz :int))

(cffi:defcfun ("tcmdbput4" tcmdbput4) :void
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (fvbuf :pointer)
  (fvsiz :int)
  (lvbuf :pointer)
  (lvsiz :int))

(cffi:defcfun ("tcmdbputcat3" tcmdbputcat3) :void
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcmdbputproc" tcmdbputproc) :boolean
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (proc :pointer)
  (op :pointer))

(cffi:defcfun ("tcmdbget3" tcmdbget3) :pointer
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcmdbiterinit2" tcmdbiterinit2) :void
  (mdb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcmdbiterinit3" tcmdbiterinit3) :void
  (mdb :pointer)
  (kstr :string))

(cffi:defcfun ("tcmdbforeach" tcmdbforeach) :void
  (mdb :pointer)
  (iter :pointer)
  (op :pointer))

(cffi:defcstruct TCNDB
	(mmtx :pointer)
	(tree :pointer))

(cffi:defcfun ("tcndbnew" tcndbnew) :pointer)

(cffi:defcfun ("tcndbnew2" tcndbnew2) :pointer
  (cmp :pointer)
  (cmpop :pointer))

(cffi:defcfun ("tcndbdel" tcndbdel) :void
  (ndb :pointer))

(cffi:defcfun ("tcndbput" tcndbput) :void
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcndbput2" tcndbput2) :void
  (ndb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcndbputkeep" tcndbputkeep) :boolean
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcndbputkeep2" tcndbputkeep2) :boolean
  (ndb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcndbputcat" tcndbputcat) :void
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcndbputcat2" tcndbputcat2) :void
  (ndb :pointer)
  (kstr :string)
  (vstr :string))

(cffi:defcfun ("tcndbout" tcndbout) :boolean
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcndbout2" tcndbout2) :boolean
  (ndb :pointer)
  (kstr :string))

(cffi:defcfun ("tcndbget" tcndbget) :pointer
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcndbget2" tcndbget2) :string
  (ndb :pointer)
  (kstr :string))

(cffi:defcfun ("tcndbvsiz" tcndbvsiz) :int
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcndbvsiz2" tcndbvsiz2) :int
  (ndb :pointer)
  (kstr :string))

(cffi:defcfun ("tcndbiterinit" tcndbiterinit) :void
  (ndb :pointer))

(cffi:defcfun ("tcndbiternext" tcndbiternext) :pointer
  (ndb :pointer)
  (sp :pointer))

(cffi:defcfun ("tcndbiternext2" tcndbiternext2) :string
  (ndb :pointer))

(cffi:defcfun ("tcndbfwmkeys" tcndbfwmkeys) :pointer
  (ndb :pointer)
  (pbuf :pointer)
  (psiz :int)
  (max :int))

(cffi:defcfun ("tcndbfwmkeys2" tcndbfwmkeys2) :pointer
  (ndb :pointer)
  (pstr :string)
  (max :int))

(cffi:defcfun ("tcndbrnum" tcndbrnum) :pointer
  (ndb :pointer))

(cffi:defcfun ("tcndbmsiz" tcndbmsiz) :pointer
  (ndb :pointer))

(cffi:defcfun ("tcndbaddint" tcndbaddint) :int
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :int))

(cffi:defcfun ("tcndbadddouble" tcndbadddouble) :double
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (num :double))

(cffi:defcfun ("tcndbvanish" tcndbvanish) :void
  (ndb :pointer))

(cffi:defcfun ("tcndbcutfringe" tcndbcutfringe) :void
  (ndb :pointer)
  (num :int))

(cffi:defcfun ("tcndbput3" tcndbput3) :void
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcndbputkeep3" tcndbputkeep3) :boolean
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcndbputcat3" tcndbputcat3) :void
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int))

(cffi:defcfun ("tcndbputproc" tcndbputproc) :boolean
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (vbuf :pointer)
  (vsiz :int)
  (proc :pointer)
  (op :pointer))

(cffi:defcfun ("tcndbget3" tcndbget3) :pointer
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int)
  (sp :pointer))

(cffi:defcfun ("tcndbiterinit2" tcndbiterinit2) :void
  (ndb :pointer)
  (kbuf :pointer)
  (ksiz :int))

(cffi:defcfun ("tcndbiterinit3" tcndbiterinit3) :void
  (ndb :pointer)
  (kstr :string))

(cffi:defcfun ("tcndbforeach" tcndbforeach) :void
  (ndb :pointer)
  (iter :pointer)
  (op :pointer))

(cffi:defcstruct TCMPELEM
	(ptr :pointer)
	(del :pointer))

(cffi:defcstruct TCMPOOL
	(mutex :pointer)
	(elems :pointer)
	(anum :int)
	(num :int))

(cffi:defcfun ("tcmpoolnew" tcmpoolnew) :pointer)

(cffi:defcfun ("tcmpooldel" tcmpooldel) :void
  (mpool :pointer))

(cffi:defcfun ("tcmpoolpush" tcmpoolpush) :pointer
  (mpool :pointer)
  (ptr :pointer)
  (del :pointer))

(cffi:defcfun ("tcmpoolpushptr" tcmpoolpushptr) :pointer
  (mpool :pointer)
  (ptr :pointer))

(cffi:defcfun ("tcmpoolpushxstr" tcmpoolpushxstr) :pointer
  (mpool :pointer)
  (xstr :pointer))

(cffi:defcfun ("tcmpoolpushlist" tcmpoolpushlist) :pointer
  (mpool :pointer)
  (list :pointer))

(cffi:defcfun ("tcmpoolpushmap" tcmpoolpushmap) :pointer
  (mpool :pointer)
  (map :pointer))

(cffi:defcfun ("tcmpoolpushtree" tcmpoolpushtree) :pointer
  (mpool :pointer)
  (tree :pointer))

(cffi:defcfun ("tcmpoolmalloc" tcmpoolmalloc) :pointer
  (mpool :pointer)
  (size :pointer))

(cffi:defcfun ("tcmpoolxstrnew" tcmpoolxstrnew) :pointer
  (mpool :pointer))

(cffi:defcfun ("tcmpoollistnew" tcmpoollistnew) :pointer
  (mpool :pointer))

(cffi:defcfun ("tcmpoolmapnew" tcmpoolmapnew) :pointer
  (mpool :pointer))

(cffi:defcfun ("tcmpooltreenew" tcmpooltreenew) :pointer
  (mpool :pointer))

(cffi:defcfun ("tcmpoolpop" tcmpoolpop) :void
  (mpool :pointer)
  (exe :pointer))

(cffi:defcfun ("tcmpoolglobal" tcmpoolglobal) :pointer)

(cffi:defcfun ("tclmax" tclmax) :long
  (a :long)
  (b :long))

(cffi:defcfun ("tclmin" tclmin) :long
  (a :long)
  (b :long))

(cffi:defcfun ("tclrand" tclrand) :unsigned-long)

(cffi:defcfun ("tcdrand" tcdrand) :double)

(cffi:defcfun ("tcdrandnd" tcdrandnd) :double
  (avg :double)
  (sd :double))

(cffi:defcfun ("tcstricmp" tcstricmp) :int
  (astr :string)
  (bstr :string))

(cffi:defcfun ("tcstrfwm" tcstrfwm) :boolean
  (str :string)
  (key :string))

(cffi:defcfun ("tcstrifwm" tcstrifwm) :boolean
  (str :string)
  (key :string))

(cffi:defcfun ("tcstrbwm" tcstrbwm) :boolean
  (str :string)
  (key :string))

(cffi:defcfun ("tcstribwm" tcstribwm) :boolean
  (str :string)
  (key :string))

(cffi:defcfun ("tcstrdist" tcstrdist) :int
  (astr :string)
  (bstr :string))

(cffi:defcfun ("tcstrdistutf" tcstrdistutf) :int
  (astr :string)
  (bstr :string))

(cffi:defcfun ("tcstrtoupper" tcstrtoupper) :string
  (str :string))

(cffi:defcfun ("tcstrtolower" tcstrtolower) :string
  (str :string))

(cffi:defcfun ("tcstrtrim" tcstrtrim) :string
  (str :string))

(cffi:defcfun ("tcstrsqzspc" tcstrsqzspc) :string
  (str :string))

(cffi:defcfun ("tcstrsubchr" tcstrsubchr) :string
  (str :string)
  (rstr :string)
  (sstr :string))

(cffi:defcfun ("tcstrcntutf" tcstrcntutf) :int
  (str :string))

(cffi:defcfun ("tcstrcututf" tcstrcututf) :string
  (str :string)
  (num :int))

(cffi:defcfun ("tcstrutftoucs" tcstrutftoucs) :void
  (str :string)
  (ary :pointer)
  (np :pointer))

(cffi:defcfun ("tcstrucstoutf" tcstrucstoutf) :int
  (ary :pointer)
  (num :int)
  (str :string))

(cffi:defcfun ("tcstrsplit" tcstrsplit) :pointer
  (str :string)
  (delims :string))

(cffi:defcfun ("tcstrjoin" tcstrjoin) :string
  (list :pointer)
  (delim :char))

(cffi:defcfun ("tcatoi" tcatoi) :pointer
  (str :string))

(cffi:defcfun ("tcatoix" tcatoix) :pointer
  (str :string))

(cffi:defcfun ("tcatof" tcatof) :double
  (str :string))

(cffi:defcfun ("tcregexmatch" tcregexmatch) :boolean
  (str :string)
  (regex :string))

(cffi:defcfun ("tcregexreplace" tcregexreplace) :string
  (str :string)
  (regex :string)
  (alt :string))

(cffi:defcfun ("tcmd5hash" tcmd5hash) :void
  (ptr :pointer)
  (size :int)
  (buf :string))

(cffi:defcfun ("tcarccipher" tcarccipher) :void
  (ptr :pointer)
  (size :int)
  (kbuf :pointer)
  (ksiz :int)
  (obuf :pointer))

(cffi:defcfun ("tctime" tctime) :double)

(cffi:defcfun ("tccalendar" tccalendar) :void
  (t_arg0 :pointer)
  (jl :int)
  (yearp :pointer)
  (monp :pointer)
  (dayp :pointer)
  (hourp :pointer)
  (minp :pointer)
  (secp :pointer))

(cffi:defcfun ("tcdatestrwww" tcdatestrwww) :void
  (t_arg0 :pointer)
  (jl :int)
  (buf :string))

(cffi:defcfun ("tcdatestrhttp" tcdatestrhttp) :void
  (t_arg0 :pointer)
  (jl :int)
  (buf :string))

(cffi:defcfun ("tcstrmktime" tcstrmktime) :pointer
  (str :string))

(cffi:defcfun ("tcjetlag" tcjetlag) :int)

(cffi:defcfun ("tcdayofweek" tcdayofweek) :int
  (year :int)
  (mon :int)
  (day :int))

(defanonenum 
	(TCUNSPACE #.(cl:ash 1 0))
	(TCUNLOWER #.(cl:ash 1 1))
	(TCUNNOACC #.(cl:ash 1 2))
	(TCUNWIDTH #.(cl:ash 1 3)))

(defanonenum 
	(TCKWMUTAB #.(cl:ash 1 0))
	(TCKWMUCTRL #.(cl:ash 1 1))
	(TCKWMUBRCT #.(cl:ash 1 2))
	(TCKWNOOVER #.(cl:ash 1 24))
	(TCKWPULEAD #.(cl:ash 1 25)))

(cffi:defcstruct TCCHIDXNODE
	(seq :pointer)
	(hash :pointer))

(cffi:defcstruct TCCHIDX
	(nodes :pointer)
	(nnum :int))

(cffi:defcfun ("tcstrisnum" tcstrisnum) :boolean
  (str :string))

(cffi:defcfun ("tcatoih" tcatoih) :pointer
  (str :string))

(cffi:defcfun ("tcstrskipspc" tcstrskipspc) :string
  (str :string))

(cffi:defcfun ("tcstrutfnorm" tcstrutfnorm) :string
  (str :string)
  (opts :int))

(cffi:defcfun ("tcstrucsnorm" tcstrucsnorm) :int
  (ary :pointer)
  (num :int)
  (opts :int))

(cffi:defcfun ("tcstrkwic" tcstrkwic) :pointer
  (str :string)
  (words :pointer)
  (width :int)
  (opts :int))

(cffi:defcfun ("tcstrtokenize" tcstrtokenize) :pointer
  (str :string))

(cffi:defcfun ("tcstrsplit2" tcstrsplit2) :pointer
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tcstrsplit3" tcstrsplit3) :pointer
  (str :string)
  (delims :string))

(cffi:defcfun ("tcstrsplit4" tcstrsplit4) :pointer
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tcstrjoin2" tcstrjoin2) :pointer
  (list :pointer)
  (sp :pointer))

(cffi:defcfun ("tcstrjoin3" tcstrjoin3) :string
  (map :pointer)
  (delim :char))

(cffi:defcfun ("tcstrjoin4" tcstrjoin4) :pointer
  (map :pointer)
  (sp :pointer))

(cffi:defcfun ("tctopsort" tctopsort) :void
  (base :pointer)
  (nmemb :pointer)
  (size :pointer)
  (top :pointer)
  (compar :pointer))

(cffi:defcfun ("tcsleep" tcsleep) :boolean
  (sec :double))

(cffi:defcfun ("tcsysinfo" tcsysinfo) :pointer)

(cffi:defcfun ("tcchidxnew" tcchidxnew) :pointer
  (range :int))

(cffi:defcfun ("tcchidxdel" tcchidxdel) :void
  (chidx :pointer))

(cffi:defcfun ("tcchidxhash" tcchidxhash) :int
  (chidx :pointer)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tcrealpath" tcrealpath) :string
  (path :string))

(cffi:defcfun ("tcstatfile" tcstatfile) :boolean
  (path :string)
  (isdirp :pointer)
  (sizep :pointer)
  (mtimep :pointer))

(cffi:defcfun ("tcreadfile" tcreadfile) :pointer
  (path :string)
  (limit :int)
  (sp :pointer))

(cffi:defcfun ("tcreadfilelines" tcreadfilelines) :pointer
  (path :string))

(cffi:defcfun ("tcwritefile" tcwritefile) :boolean
  (path :string)
  (ptr :pointer)
  (size :int))

(cffi:defcfun ("tccopyfile" tccopyfile) :boolean
  (src :string)
  (dest :string))

(cffi:defcfun ("tcreaddir" tcreaddir) :pointer
  (path :string))

(cffi:defcfun ("tcglobpat" tcglobpat) :pointer
  (pattern :string))

(cffi:defcfun ("tcremovelink" tcremovelink) :boolean
  (path :string))

(cffi:defcfun ("tcwrite" tcwrite) :boolean
  (fd :int)
  (buf :pointer)
  (size :pointer))

(cffi:defcfun ("tcread" tcread) :boolean
  (fd :int)
  (buf :pointer)
  (size :pointer))

(cffi:defcfun ("tclock" tclock) :boolean
  (fd :int)
  (ex :pointer)
  (nb :pointer))

(cffi:defcfun ("tcunlock" tcunlock) :boolean
  (fd :int))

(cffi:defcfun ("tcsystem" tcsystem) :int
  (args :pointer)
  (anum :int))

(cffi:defcfun ("tcurlencode" tcurlencode) :string
  (ptr :string)
  (size :int))

(cffi:defcfun ("tcurldecode" tcurldecode) :string
  (str :string)
  (sp :pointer))

(cffi:defcfun ("tcurlbreak" tcurlbreak) :pointer
  (str :string))

(cffi:defcfun ("tcurlresolve" tcurlresolve) :string
  (base :string)
  (target :string))

(cffi:defcfun ("tcbaseencode" tcbaseencode) :string
  (ptr :string)
  (size :int))

(cffi:defcfun ("tcbasedecode" tcbasedecode) :string
  (str :string)
  (sp :pointer))

(cffi:defcfun ("tcquoteencode" tcquoteencode) :string
  (ptr :string)
  (size :int))

(cffi:defcfun ("tcquotedecode" tcquotedecode) :string
  (str :string)
  (sp :pointer))

(cffi:defcfun ("tcmimeencode" tcmimeencode) :string
  (str :string)
  (encname :string)
  (base :pointer))

(cffi:defcfun ("tcmimedecode" tcmimedecode) :string
  (str :string)
  (enp :string))

(cffi:defcfun ("tcmimebreak" tcmimebreak) :string
  (ptr :string)
  (size :int)
  (headers :pointer)
  (sp :pointer))

(cffi:defcfun ("tcmimeparts" tcmimeparts) :pointer
  (ptr :string)
  (size :int)
  (boundary :string))

(cffi:defcfun ("tchexencode" tchexencode) :string
  (ptr :string)
  (size :int))

(cffi:defcfun ("tchexdecode" tchexdecode) :string
  (str :string)
  (sp :pointer))

(cffi:defcfun ("tcpackencode" tcpackencode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcpackdecode" tcpackdecode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcbsencode" tcbsencode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcbsdecode" tcbsdecode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcdeflate" tcdeflate) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcinflate" tcinflate) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcgzipencode" tcgzipencode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcgzipdecode" tcgzipdecode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcgetcrc" tcgetcrc) :unsigned-int
  (ptr :string)
  (size :int))

(cffi:defcfun ("tcbzipencode" tcbzipencode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcbzipdecode" tcbzipdecode) :string
  (ptr :string)
  (size :int)
  (sp :pointer))

(cffi:defcfun ("tcberencode" tcberencode) :string
  (ary :pointer)
  (anum :int)
  (sp :pointer))

(cffi:defcfun ("tcberdecode" tcberdecode) :pointer
  (ptr :string)
  (size :int)
  (np :pointer))

(cffi:defcfun ("tcxmlescape" tcxmlescape) :string
  (str :string))

(cffi:defcfun ("tcxmlunescape" tcxmlunescape) :string
  (str :string))

(cffi:defcfun ("tcwwwformencode" tcwwwformencode) :string
  (params :pointer))

(cffi:defcfun ("tcwwwformdecode" tcwwwformdecode) :void
  (str :string)
  (params :pointer))

(cffi:defcfun ("tcwwwformdecode2" tcwwwformdecode2) :void
  (ptr :pointer)
  (size :int)
  (type :string)
  (params :pointer))

(cffi:defcfun ("tcxmlbreak" tcxmlbreak) :pointer
  (str :string))

(cffi:defcfun ("tcxmlattrs" tcxmlattrs) :pointer
  (str :string))

(cffi:defcfun ("tccstrescape" tccstrescape) :string
  (str :string))

(cffi:defcfun ("tccstrunescape" tccstrunescape) :string
  (str :string))

(cffi:defcfun ("tcjsonescape" tcjsonescape) :string
  (str :string))

(cffi:defcfun ("tcjsonunescape" tcjsonunescape) :string
  (str :string))

(cffi:defcstruct TCTMPL
	(elems :pointer)
	(begsep :string)
	(endsep :string)
	(conf :pointer))

(cffi:defcfun ("tctmplnew" tctmplnew) :pointer)

(cffi:defcfun ("tctmpldel" tctmpldel) :void
  (tmpl :pointer))

(cffi:defcfun ("tctmplsetsep" tctmplsetsep) :void
  (tmpl :pointer)
  (begsep :string)
  (endsep :string))

(cffi:defcfun ("tctmplload" tctmplload) :void
  (tmpl :pointer)
  (str :string))

(cffi:defcfun ("tctmplload2" tctmplload2) :boolean
  (tmpl :pointer)
  (path :string))

(cffi:defcfun ("tctmpldump" tctmpldump) :string
  (tmpl :pointer)
  (vars :pointer))

(cffi:defcfun ("tctmplconf" tctmplconf) :string
  (tmpl :pointer)
  (name :string))

(cffi:defcfun ("tclistpushlist" tclistpushlist) :void
  (list :pointer)
  (obj :pointer))

(cffi:defcfun ("tclistpushmap" tclistpushmap) :void
  (list :pointer)
  (obj :pointer))

(cffi:defcfun ("tcmapputlist" tcmapputlist) :void
  (map :pointer)
  (kstr :string)
  (obj :pointer))

(cffi:defcfun ("tcmapputmap" tcmapputmap) :void
  (map :pointer)
  (kstr :string)
  (obj :pointer))

(cffi:defcstruct TCPTRLIST
	(array :pointer)
	(anum :int)
	(start :int)
	(num :int))

(cffi:defcfun ("tcptrlistnew" tcptrlistnew) :pointer)

(cffi:defcfun ("tcptrlistnew2" tcptrlistnew2) :pointer
  (anum :int))

(cffi:defcfun ("tcptrlistdup" tcptrlistdup) :pointer
  (ptrlist :pointer))

(cffi:defcfun ("tcptrlistdel" tcptrlistdel) :void
  (ptrlist :pointer))

(cffi:defcfun ("tcptrlistnum" tcptrlistnum) :int
  (ptrlist :pointer))

(cffi:defcfun ("tcptrlistval" tcptrlistval) :pointer
  (ptrlist :pointer)
  (index :int))

(cffi:defcfun ("tcptrlistpush" tcptrlistpush) :void
  (ptrlist :pointer)
  (ptr :pointer))

(cffi:defcfun ("tcptrlistpop" tcptrlistpop) :pointer
  (ptrlist :pointer))

(cffi:defcfun ("tcptrlistunshift" tcptrlistunshift) :void
  (ptrlist :pointer)
  (ptr :pointer))

(cffi:defcfun ("tcptrlistshift" tcptrlistshift) :pointer
  (ptrlist :pointer))

(cffi:defcfun ("tcptrlistinsert" tcptrlistinsert) :void
  (ptrlist :pointer)
  (index :int)
  (ptr :pointer))

(cffi:defcfun ("tcptrlistremove" tcptrlistremove) :pointer
  (ptrlist :pointer)
  (index :int))

(cffi:defcfun ("tcptrlistover" tcptrlistover) :void
  (ptrlist :pointer)
  (index :int)
  (ptr :pointer))

(cffi:defcfun ("tcptrlistclear" tcptrlistclear) :void
  (ptrlist :pointer))

(cffi:defcstruct TCBITSTRM
	(sp :pointer)
	(cp :pointer)
	(idx :int)
	(size :int))

(cffi:defctype TCBITMAP :unsigned-char)

(cl:defconstant _TC_VERSION "1.4.32")

(cl:defconstant _TC_LIBVER 823)

(cl:defconstant _TC_FORMATVER "1.0")

(defanonenum 
	TCESUCCESS
	TCETHREAD
	TCEINVALID
	TCENOFILE
	TCENOPERM
	TCEMETA
	TCERHEAD
	TCEOPEN
	TCECLOSE
	TCETRUNC
	TCESYNC
	TCESTAT
	TCESEEK
	TCEREAD
	TCEWRITE
	TCEMMAP
	TCELOCK
	TCEUNLINK
	TCERENAME
	TCEMKDIR
	TCERMDIR
	TCEKEEP
	TCENOREC
	(TCEMISC #.9999))

(defanonenum 
	TCDBTHASH
	TCDBTBTREE
	TCDBTFIXED
	TCDBTTABLE)

(cffi:defcfun ("tcerrmsg" tcerrmsg) :string
  (ecode :int))

(cffi:defcfun ("tcmyfatal" tcmyfatal) :pointer
  (message :string))

(cffi:defcfun ("tczeromap" tczeromap) :pointer
  (size :pointer))

(cffi:defcfun ("tczerounmap" tczerounmap) :void
  (ptr :pointer))

(cffi:defcfun ("tcglobalmutexlock" tcglobalmutexlock) :boolean)

(cffi:defcfun ("tcglobalmutexlockshared" tcglobalmutexlockshared) :boolean)

(cffi:defcfun ("tcglobalmutexunlock" tcglobalmutexunlock) :boolean)

(cffi:defcfun ("tcpathlock" tcpathlock) :boolean
  (path :string))

(cffi:defcfun ("tcpathunlock" tcpathunlock) :boolean
  (path :string))

(cffi:defcfun ("tcnumtostrbin" tcnumtostrbin) :int
  (num :pointer)
  (buf :string)
  (col :int)
  (fc :int))

(cffi:defcfun ("tccmplexical" tccmplexical) :int
  (aptr :string)
  (asiz :int)
  (bptr :string)
  (bsiz :int)
  (op :pointer))

(cffi:defcfun ("tccmpdecimal" tccmpdecimal) :int
  (aptr :string)
  (asiz :int)
  (bptr :string)
  (bsiz :int)
  (op :pointer))

(cffi:defcfun ("tccmpint32" tccmpint32) :int
  (aptr :string)
  (asiz :int)
  (bptr :string)
  (bsiz :int)
  (op :pointer))

(cffi:defcfun ("tccmpint64" tccmpint64) :int
  (aptr :string)
  (asiz :int)
  (bptr :string)
  (bsiz :int)
  (op :pointer))

(cffi:defcfun ("tcbwtencode" tcbwtencode) :string
  (ptr :string)
  (size :int)
  (idxp :pointer))

(cffi:defcfun ("tcbwtdecode" tcbwtdecode) :string
  (ptr :string)
  (size :int)
  (idx :int))

(cffi:defcfun ("tclog2l" tclog2l) :long
  (num :long))

(cffi:defcfun ("tclog2d" tclog2d) :double
  (num :double))

(cffi:defcfun ("tcpagealign" tcpagealign) :pointer
  (off :pointer))


